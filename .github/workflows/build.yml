name: Build

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version (ie 0.1.5)'
        required: true
    
    branches:
    - main
  
  push:
    branches:
    - dev
    paths:
    - '.github/workflows/build.yml'
    - 'aimodule/**'
    - 'protos/**.proto'
    - 'protos/make-protos.bat'

jobs:
  build:
    runs-on: windows-2019
    
    steps:
      - name: Checkout aoe2-ai-module
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      
      - name: Restore (cache) vcpkg
        id: cache-vcpkg
        uses: actions/cache@0781355a23dac32fd3bac414512f4b903437991a
        with:
          path: |
            .\vcpkg
            !.\vcpkg\buildtrees
            !.\vcpkg\downloads
            !.\vcpkg\packages
          key: cache-vcpkg-4a678aa329c0a6323d7334fdf3ad37d571600d27-${{ hashFiles('.\aimodule\vcpkg_dependencies.txt') }}
      
      - name: Checkout vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          repository: microsoft/vcpkg
          ref: 4a678aa329c0a6323d7334fdf3ad37d571600d27
          path: vcpkg
      
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@c26a08ba26249b81327e26f6ef381897b6a8754d
      
      - name: Compile vcpkg
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: '.\vcpkg\bootstrap-vcpkg.bat'
        shell: cmd
      
      - name: Install vcpkg libraries
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: '.\vcpkg\vcpkg install --recurse @.\aimodule\vcpkg_dependencies.txt --clean-after-build'
        shell: cmd
      
      - name: Integrate vcpkg
        run: '.\vcpkg\vcpkg integrate install'
        shell: cmd
      
      - name: Generate protobuf+grpc include files
        run: '.\protos\make-protos.bat'
        shell: cmd
      
      - name: Build AI Module x86
        run: 'msbuild .\aimodule\aimodule.vcxproj /p:Configuration=Release /p:Platform=x86'
        shell: cmd
      
      - name: Build AI Module x64
        run: 'msbuild .\aimodule\aimodule.vcxproj /p:Configuration=Release /p:Platform=x64'
        shell: cmd
      
      - name: Create latest-dev release with metadata
        if: endsWith(github.ref, 'dev')
        uses: marvinpinto/action-automatic-releases@4e86dbcfb19c3e408a4984b2b7d9a6de082f3c3f
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: 'latest-dev'
          prerelease: true
          title: 'Latest Development Build ${{ github.run_number }}'
      
      - name: Update latest-dev release with x86 binary
        if: endsWith(github.ref, 'dev')
        uses: svenstaro/upload-release-action@4e5de2077753aa547cb9ca80caa0f77bf18f6bfb
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'aimodule/Release/aimodule.dll'
          asset_name: 'aimodule-aoc.dll'
          tag: 'latest-dev'
      
      - name: Update latest-dev release with x64 binary
        if: endsWith(github.ref, 'dev')
        uses: svenstaro/upload-release-action@4e5de2077753aa547cb9ca80caa0f77bf18f6bfb
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: 'aimodule/x64/Release/aimodule.dll'
          asset_name: 'aimodule-de.dll'
          tag: 'latest-dev'
      
      - name: Create main release
        id: create-main-release
        if: endsWith(github.ref, 'main')
        uses: actions/create-release@c38d3a140cc22e67e265c5d5b6b4888d1f02533f
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.releaseVersion }}
          release_name: Release ${{ github.event.inputs.releaseVersion }}
          draft: true
      
      - name: Update main release with x86 binary
        if: endsWith(github.ref, 'main')
        uses: actions/upload-release-asset@e9f0662bdf9868f4aac644f0eedc2b56567fdba8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-main-release.outputs.upload_url }}
          asset_path: 'aimodule/Release/aimodule.dll'
          asset_name: 'aimodule-aoc.dll'
          asset_content_type: 'application/octet-stream'
      
      - name: Update main release with x64 binary
        if: endsWith(github.ref, 'main')
        uses: actions/upload-release-asset@e9f0662bdf9868f4aac644f0eedc2b56567fdba8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-main-release.outputs.upload_url }}
          asset_path: 'aimodule/x64/Release/aimodule.dll'
          asset_name: 'aimodule-de.dll'
          asset_content_type: 'application/octet-stream'
      
      
      
      
      
      
      
      